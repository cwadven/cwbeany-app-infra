apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-cron
  labels:
    app: django-cron
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django-cron
  template:
    metadata:
      labels:
        app: django-cron
    spec:
      containers:
        - name: django-cron
          image: beany258/django:1.0.12
          command: ["/bin/sh", "-c"]
          args:
            - |
              apt-get update && apt-get install -y cron
              apt-get install -y vim
              apt-get install -y dos2unix

              # 로그 디렉토리 생성
              mkdir -p ${CRON_LOG_DIR}

              # 생성된 디렉토리에 만들어질 파일의 권한 변경
              chmod -R 777 ${CRON_LOG_DIR}

              # 백업 디렉토리 생성
              mkdir -p ${BACKUP_PATH}

              # 백업 디렉토리에 만들어질 파일의 권한 변경
              chmod -R 777 ${BACKUP_PATH}

              # 환경 변수를 안전하게 처리하는 env.sh 파일 생성
              echo '#!/bin/bash' > /tmp/env.sh
              env | while read -r line; do
                # 특수 문자를 이스케이프하여 처리
                var_name=$(echo "$line" | cut -d= -f1)
                var_value=$(echo "$line" | cut -d= -f2-)
                echo "export $var_name=\"$var_value\"" >> /tmp/env.sh
              done

              # env.sh 파일 권한 변경 및 유닉스 형식으로 변환
              chmod 0755 /tmp/env.sh
              dos2unix /tmp/env.sh

              # command.cron 파일 생성
              dos2unix command.cron
              chmod 0644 command.cron
              cat command.cron | crontab -
              
              # rsyslog 설치 및 설정
              apt-get install -y rsyslog
              
              # cron 로깅 활성화
              echo "cron.*                          ${CRON_LOG_DIR}/cron.log" > /etc/rsyslog.d/cron.conf
              
              # cron 디버깅 모드 활성화
              echo 'EXTRA_OPTS="-L 2"' >> /etc/default/cron
              
              # rsyslog 및 cron 서비스 재시작
              service rsyslog restart
              service cron restart
              
              # 로그 파일 권한 설정
              touch ${CRON_LOG_DIR}/cron.log
              chmod 666 ${CRON_LOG_DIR}/cron.log
              
              # Cron 된 내용 확인
              echo "Cron 된 내용 확인"
              echo "--------------------------------"
              crontab -l
              echo "--------------------------------"
              crontab -l > ${CRON_LOG_DIR}/current_crontab.txt
              
              echo "Cron 로깅이 활성화되었습니다. 로그는 ${CRON_LOG_DIR}/cron.log에서 확인할 수 있습니다."

              # Keep container running
              tail -f /dev/null
          envFrom:
            - configMapRef:
                name: django-config
            - secretRef:
                name: django-secret
          volumeMounts:
            - name: media
              mountPath: /app/media
            - name: logs
              mountPath: /app/logs
            - name: google-service-account
              mountPath: /app/secrets
              readOnly: true
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: django-media-pvc
        - name: logs
          emptyDir: {}
        - name: google-service-account
          secret:
            secretName: google-service-account 